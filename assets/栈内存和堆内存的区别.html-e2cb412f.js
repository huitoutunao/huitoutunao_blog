import{_ as a,o as e,c as r,d as i}from"./app-7afcd560.js";const t="/images/js_advanced/1.jpg",d={},h=i('<h1 id="栈内存和堆内存的区别" tabindex="-1"><a class="header-anchor" href="#栈内存和堆内存的区别" aria-hidden="true">#</a> 栈内存和堆内存的区别</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><ul><li>基本类型值在内存中占据固定大小的空间，所以被保存在栈内存中。</li><li>引用类型的值是对象，保存在堆内存中。</li></ul><div class="custom-container warning"><p class="custom-container-title">注意</p><p>这里是指把它们的值按类型保存在栈/堆中。</p></div><h2 id="什么是栈" tabindex="-1"><a class="header-anchor" href="#什么是栈" aria-hidden="true">#</a> 什么是栈</h2><p>栈（stack）又名堆栈，是一种遵循后进先出（LIFO）原则的有序集合。新添加或待删除的元素都保存在栈的末尾，称作栈顶，另一端称作栈底。在栈里，新元素都靠近栈顶，旧元素都接近栈底。</p><p>这就类比羽毛球槽，先放进去的羽毛球，最后才能被取出来。</p><h2 id="什么是堆" tabindex="-1"><a class="header-anchor" href="#什么是堆" aria-hidden="true">#</a> 什么是堆</h2><p>堆（heap）是无序的，它们是以 key-value 键值对形式存储。</p><p>这就类比电话簿找某人的电话号码，你只要知道他的名字就可以了，无需像栈一样，把前面的名字都筛查一遍。</p><h2 id="比较优缺点" tabindex="-1"><a class="header-anchor" href="#比较优缺点" aria-hidden="true">#</a> 比较优缺点</h2><p>在 JavaScript 中，基本数据类型变量大小固定，并且操作简单容易，所以把它们放入栈中存储。引用类型变量大小不固定，所以把它们分配给堆中，让他们申请空间的时候自己确定大小，这样把它们分开存储能够使得程序运行起来占用的内存最小。</p><p>栈内存由于它的特点，所以它的系统效率较高。堆内存需要分配空间和地址，还要把地址存到栈中，所以效率低于栈。</p><p><img src="'+t+'" alt="js中栈内存和堆内存"></p><h2 id="垃圾回收" tabindex="-1"><a class="header-anchor" href="#垃圾回收" aria-hidden="true">#</a> 垃圾回收</h2><p>栈内存中变量一般在它的当前执行环境结束就会被销毁被垃圾回收制回收，而堆内存中的变量则不会，因为不确定其他的地方是不是还有一些对它的引用。堆内存中的变量只有在所有对它的引用都结束的时候才会被回收。</p>',16),c=[h];function n(s,_){return e(),r("div",null,c)}const p=a(d,[["render",n],["__file","栈内存和堆内存的区别.html.vue"]]);export{p as default};
