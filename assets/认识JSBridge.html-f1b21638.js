import{_ as p,r as c,o as i,c as o,a,b as n,e,d as t}from"./app-58148c69.js";const l={},u=t(`<h1 id="认识-jsbridge" tabindex="-1"><a class="header-anchor" href="#认识-jsbridge" aria-hidden="true">#</a> 认识 JSBridge</h1><h2 id="什么是-jsbridge" tabindex="-1"><a class="header-anchor" href="#什么是-jsbridge" aria-hidden="true">#</a> 什么是 JSBridge</h2><p>JSBridge 是以 JavaScript 实现的方法，它的作用是连接着 Native 和 H5 两端，建立双向通信的桥梁。即 APP 内有利于 H5 调用 Native 的能力，例如：扫码、拍照、查看相册等等。也方便了 Native 调用 H5 中的 JavaScript 方法。</p><h3 id="native-与-h5-的比较" tabindex="-1"><a class="header-anchor" href="#native-与-h5-的比较" aria-hidden="true">#</a> Native 与 H5 的比较</h3><table><thead><tr><th>属性</th><th>Native</th><th>H5</th></tr></thead><tbody><tr><td>稳定性</td><td>使用原生内核，更加稳定</td><td>调用系统浏览器内核，稳定性较差</td></tr><tr><td>灵活性</td><td>每次迭代都要平台审核，上线速度受限</td><td>上线灵活</td></tr><tr><td>流畅度</td><td>加载速度快且流畅</td><td>偶尔加载慢，有卡顿的效果</td></tr><tr><td>网速</td><td>较小</td><td>较大</td></tr><tr><td>用户体验</td><td>原生系统 api 丰富，能实现的功能较多，体验较好</td><td>功能受浏览器限制，体验有时较差</td></tr><tr><td>可移植性</td><td>对于 iOS 和 Android 需要维护两套代码</td><td>兼容跨平台跨系统，如 PC 与 移动端，iOS 与 Android</td></tr></tbody></table><h2 id="jsbridge-的通信原理简介" tabindex="-1"><a class="header-anchor" href="#jsbridge-的通信原理简介" aria-hidden="true">#</a> JSBridge 的通信原理简介</h2><h3 id="javascript-调用-native" tabindex="-1"><a class="header-anchor" href="#javascript-调用-native" aria-hidden="true">#</a> JavaScript 调用 Native</h3><h4 id="拦截-url-scheme" tabindex="-1"><a class="header-anchor" href="#拦截-url-scheme" aria-hidden="true">#</a> 拦截 <code>URL Scheme</code></h4><p>Android 和 iOS 内置方法支持拦截 <code>URL Scheme</code> 并解析 scheme 来决定是否进行对应的原生代码逻辑处理。</p><p>优点是不存在漏洞问题、使用灵活，可以实现 H5 和 Native 页面的无缝切换。</p><p>缺点是使用 <code>iframe.src</code> 来发送 <code>URL Scheme</code> 需要对 URL 的长度作控制，使用复杂，速度较慢。</p><h4 id="重写-prompt" tabindex="-1"><a class="header-anchor" href="#重写-prompt" aria-hidden="true">#</a> 重写 prompt</h4><p>一般会通过修改浏览器的部分 Window 对象的方法来完成操作。主要是拦截 <code>alert</code>、<code>confirm</code>、<code>prompt</code>、<code>console.log</code> 四个方法，分别被 Webview 的 <code>onJsAlert</code>、<code>onJsConfirm</code>、<code>onConsoleMessage</code>、<code>onJsPrompt</code> 监听。</p><p>使用该方式时，可以与 Android 和 iOS 约定好使用传参的格式，这样 H5 可以无需识别客户端，传入不同参数直接调用 Native 即可。剩下的交给客户端自己去拦截相同的方法，识别相同的参数，进行自己的处理逻辑即可实现多端表现一致。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;qrcode&#39;</span><span class="token punctuation">,</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="注入-api" tabindex="-1"><a class="header-anchor" href="#注入-api" aria-hidden="true">#</a> 注入 API</h4><p>基于 Webview 提供的能力，我们可以向 Window 上注入对象或方法。JS 通过这个对象或方法进行调用时，执行对应的逻辑操作，可以直接调用 Native 的方法。使用该方式时，JS 需要等到 Native 执行完对应的逻辑后才能进行回调里面的操作。</p><p>例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span>NativeApi<span class="token punctuation">.</span><span class="token function">share</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="native-调用-javascript" tabindex="-1"><a class="header-anchor" href="#native-调用-javascript" aria-hidden="true">#</a> Native 调用 JavaScript</h3><p>只要 H5 将 JS 方法暴露在 Window 上给 Native 调用即可。</p><h2 id="jsbridge-的使用" tabindex="-1"><a class="header-anchor" href="#jsbridge-的使用" aria-hidden="true">#</a> JSBridge 的使用</h2>`,22),d={href:"https://github.com/lzyzsd/JsBridge",target:"_blank",rel:"noopener noreferrer"},r={href:"https://github.com/marcuswestin/WebViewJavascriptBridge",target:"_blank",rel:"noopener noreferrer"},k=t(`<p>可以做如下封装：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * Android https://github.com/lzyzsd/JsBridge
 * IOS https://github.com/marcuswestin/WebViewJavascriptBridge
 * h5 与客户端通信协议
 *
 * 示例 1
 * JSBridge.h5CallNative(
 *    &#39;fnName&#39;
      <span class="token punctuation">{</span>
        param: &#39;0&#39;,
      <span class="token punctuation">}</span>,
      function (res) <span class="token punctuation">{</span>
        console.log(res)
      <span class="token punctuation">}</span>
    )
 * 示例 2
   JSBridge.nativeCallH5(
     &#39;fnName&#39;,
     function (res) <span class="token punctuation">{</span>
       console.log(res)
     <span class="token punctuation">}</span>
   )
 */</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> JSBridge <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">setupWebViewJavascriptBridge</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>WebViewJavascriptBridge<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span>WebViewJavascriptBridge<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>WVJBCallbacks<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> window<span class="token punctuation">.</span>WVJBCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      window<span class="token punctuation">.</span>WVJBCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span>callback<span class="token punctuation">]</span>
      <span class="token keyword">const</span> WVJBIframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;iframe&#39;</span><span class="token punctuation">)</span>
      WVJBIframe<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">&#39;none&#39;</span>
      WVJBIframe<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&#39;https://__bridge_loaded__&#39;</span>
      document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>WVJBIframe<span class="token punctuation">)</span>
      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>WVJBIframe<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 处理异常</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token doc-comment comment">/**
   * h5 调用客户端
   * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">fnInNative</span> 调用协议的方法名
   * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token punctuation">}</span></span> <span class="token parameter">param</span> 调用协议的参数
   * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span> <span class="token parameter">callback</span> 接收客户端回调函数
   */</span>
  <span class="token function">h5CallNative</span><span class="token punctuation">(</span><span class="token parameter">fnInNative<span class="token punctuation">,</span> param<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setupWebViewJavascriptBridge</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">bridge</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      bridge<span class="token punctuation">.</span><span class="token function">callHandler</span><span class="token punctuation">(</span>fnInNative<span class="token punctuation">,</span> param<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">responseData</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token function">callback</span><span class="token punctuation">(</span>responseData<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token doc-comment comment">/**
   * 客户端调用 h5 Js 方法
   * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">fnInJs</span> 注册方法名
   * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span> <span class="token parameter">callback</span> 接收客户端回调函数
   */</span>
  <span class="token function">nativeCallH5</span><span class="token punctuation">(</span><span class="token parameter">fnInJs<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setupWebViewJavascriptBridge</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">bridge</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      bridge<span class="token punctuation">.</span><span class="token function">registerHandler</span><span class="token punctuation">(</span>fnInJs<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">responseData</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token function">callback</span><span class="token punctuation">(</span>responseData<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="结语" tabindex="-1"><a class="header-anchor" href="#结语" aria-hidden="true">#</a> 结语</h2><p>通过这篇文章，可以简单了解 JSBridge 的概念、作用和部分原理，以及第三方库的使用。希望这篇文章能够帮助到你。</p><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献" aria-hidden="true">#</a> 参考文献</h2>`,5),v={href:"https://www.zoo.team/article/jsbridge",target:"_blank",rel:"noopener noreferrer"};function m(b,h){const s=c("ExternalLinkIcon");return i(),o("div",null,[u,a("p",null,[n("例如：Android 使用第三方库"),a("a",d,[n("JsBridge"),e(s)]),n("，iOS 使用第三方库"),a("a",r,[n("WebViewJavascriptBridge"),e(s)]),n("。")]),k,a("p",null,[a("a",v,[n("小白必看，JSBridge 初探"),e(s)])])])}const g=p(l,[["render",m],["__file","认识JSBridge.html.vue"]]);export{g as default};
