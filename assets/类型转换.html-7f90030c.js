import{_ as o,r as e,o as c,c as l,a as s,b as n,e as t,d as p}from"./app-bc941942.js";const i={},u=s("h1",{id:"类型转换",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#类型转换","aria-hidden":"true"},"#"),n(" 类型转换")],-1),r=s("p",null,"将值从一种类型转换为另一种类型通常称为类型转换。",-1),k=s("p",null,"JavaScript 的类型转换既简单又复杂，从 JavaScript 诞生之日起一直是饱受争议的话题。",-1),d=s("p",null,"截止写稿日期，JavaScript 共有八种数据类型，分别是：Undefined、Null、Boolean、Number、String、Object、Symbol、BigInt。",-1),v={href:"https://262.ecma-international.org/5.1/#sec-9.8",target:"_blank",rel:"noopener noreferrer"},m={href:"https://yanhaijing.com/es5/#111",target:"_blank",rel:"noopener noreferrer"},b={href:"https://262.ecma-international.org/5.1/#sec-9.3",target:"_blank",rel:"noopener noreferrer"},g={href:"https://yanhaijing.com/es5/#105",target:"_blank",rel:"noopener noreferrer"},f={href:"https://262.ecma-international.org/5.1/#sec-9.2",target:"_blank",rel:"noopener noreferrer"},h={href:"https://yanhaijing.com/es5/#104",target:"_blank",rel:"noopener noreferrer"},y={href:"https://262.ecma-international.org/5.1/#sec-9.1",target:"_blank",rel:"noopener noreferrer"},S={href:"https://yanhaijing.com/es5/#103",target:"_blank",rel:"noopener noreferrer"},N=p(`<h2 id="tostring" tabindex="-1"><a class="header-anchor" href="#tostring" aria-hidden="true">#</a> ToString</h2><p>它负责处理非字符串到字符串的强制类型转换。转换规则见下表：</p><table><thead><tr><th>参数类型</th><th>结果</th></tr></thead><tbody><tr><td>Undefined</td><td>&quot;undefined&quot;</td></tr><tr><td>Null</td><td>&quot;null&quot;</td></tr><tr><td>Boolean</td><td>如果参数是 true，那么结果为 &quot;true&quot;。<br>如果参数是 false，那么结果为 &quot;false&quot;。</td></tr><tr><td>Number</td><td>这个比较复杂，见下面例子</td></tr><tr><td>String</td><td>返回输入的参数（不转换）</td></tr><tr><td>Object</td><td>分两步走：<br> 1、primValue = ToPrimitive(input, String)。<br>2、返回ToNumber(primValue)。</td></tr></tbody></table><p>传入 Number 类型时，输出结果：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> negative_0 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0</span>
<span class="token keyword">var</span> negative_Infinity <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">Infinity</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3.14</span> <span class="token operator">*</span> <span class="token number">10000</span> <span class="token operator">*</span> <span class="token number">10000</span> <span class="token operator">*</span> <span class="token number">10000</span> <span class="token operator">*</span> <span class="token number">10000</span> <span class="token operator">*</span> <span class="token number">10000</span> <span class="token operator">*</span> <span class="token number">10000</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>negative_0<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Infinity</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>negative_Infinity<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// -Infinity</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 3.14e24</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至于传入 Object 类型时，输出结果的分析，我们等介绍完 ToPrimitive 后再细说，这里简单提及两个：</p><ol><li>对普通对象来说，除非自行定义，否则 <code>toString()</code> 返回内部属性 [[Class]] 的值。如果对象本身有定义 toString() 方法，那么字符串化时就会调用该方法并使用其返回值。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// demo1</span>
<span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;xiaoming&#39;</span> <span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [object Object]</span>

<span class="token comment">// demo2</span>
<span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;xiaoming&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">toString</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&#39;type string&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// type string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>数组默认的 <code>toString()</code> 方法经过了重新定义，将所有单元字符串化后再用“,”连接起来。<code>toString()</code> 可以被显示调用，或者在需要字符串化时自动调用。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1,2,3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="json-stringify" tabindex="-1"><a class="header-anchor" href="#json-stringify" aria-hidden="true">#</a> JSON.stringify</h3><p><code>JSON.stringify()</code> 方法在将 JSON 对象序列化为字符串时也用到了 <code>ToString</code>，所以 JSON 字符串化并非严格意义上的强制类型转换，只是其中也涉及到 <code>ToString</code> 的相关规则，因此这里顺带扩展下。</p><p>对大多数简单值来说，JSON 字符串化和 <code>toString()</code> 的效果基本相同，只不过序列化的结果总是字符串。见下面例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 43</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token string">&#39;43&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;43&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// null</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// undefined，打印结果不是字符串的 undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>JSON.stringify()</code> 在<strong>对象</strong>中遇到 undefined、function 和 symbol 时会自动将其忽略，在数组中则会返回 null 以保证单元位置不变。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [1, null, null, 4]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function-variable function">b</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// {&quot;a&quot;:1}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>对包含循环引用的对象执行 <code>JSON.stringify()</code> 会报错。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token literal-property property">c</span><span class="token operator">:</span> o<span class="token punctuation">,</span>
    <span class="token function-variable function">d</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">e</span><span class="token operator">:</span> b <span class="token comment">// 循环引用对象 b</span>
<span class="token punctuation">}</span>

<span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">// 报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>遇到上面情况时，可以自定义 <code>toJSON()</code> 方法来返回一个安全的 JSON 值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 代码接上</span>
b<span class="token punctuation">.</span><span class="token function-variable function">toJSON</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">&#39;hello world&#39;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">// {&quot;b&quot;:&quot;hello world&quot;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p>这里的 toJSON 返回的是一个适当的值，可以是任何类型，然后再由 <code>JSON.stringify()</code> 方法对其进行字符串化。也就是说，<code>toJSON()</code> 返回一个能够被字符串化的安全的 JSON 值。</p></div><p>举个例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> o1 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">v</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token function-variable function">toJSON</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> v
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> o2 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">v</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token function-variable function">toJSON</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> v <span class="token operator">+</span> <span class="token string">&#39;&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;1&quot; 可能不是理想结果（字符串基础上再添加 &quot;&quot;）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们介绍下 <code>JSON.stringify</code> 的第二个参数 <code>replacer</code>。</p><blockquote><p>如果该参数是一个函数，它可以携带两个参数，分别是键（key）和值（value），则在序列化过程中，被序列化的值的每个属性都会经过该函数的转换和处理；如果该参数是一个数组，则只有包含在这个数组中的属性名才会被序列化到最终的 JSON 字符串中；如果该参数为 null 或者未提供，则对象所有的属性都会被序列化。</p></blockquote><p>举个例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// {&quot;b&quot;:2,&quot;c&quot;:&quot;3&quot;}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">k<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">!==</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> v
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// {&quot;b&quot;:2,&quot;d&quot;:[1,2,3]}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们介绍下 <code>JSON.stringify</code> 的第三个参数 <code>space</code>。</p><blockquote><p>指定缩进用的空白字符串，用于美化输出（pretty-print）；如果参数是个数字，它代表有多少的空格；上限为 10。该值若小于 1，则意味着没有空格；如果该参数为字符串（当字符串长度超过 10 个字母，取其前 10 个字母），该字符串将被作为空格；如果该参数没有提供（或者为 null），将没有空格。</p></blockquote><blockquote><p>该参数用来控制结果字符串里面的间距。如果是一个数字, 则在字符串化时每一级别会比上一级别缩进多这个数字值的空格（最多10个空格）；如果是一个字符串，则每一级别会比上一级别多缩进该字符串（或该字符串的前10个字符）。</p></blockquote><p>举个例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&#39;----&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// {</span>
<span class="token comment">// ----&quot;b&quot;: 2,</span>
<span class="token comment">// ----&quot;c&quot;: &quot;3&quot;,</span>
<span class="token comment">// ----&quot;d&quot;: [</span>
<span class="token comment">// --------1,</span>
<span class="token comment">// --------2,</span>
<span class="token comment">// --------3</span>
<span class="token comment">// ----]</span>
<span class="token comment">// }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="tonumber" tabindex="-1"><a class="header-anchor" href="#tonumber" aria-hidden="true">#</a> ToNumber</h2>`,33),_={href:"https://262.ecma-international.org/5.1/#sec-15.7.1.1",target:"_blank",rel:"noopener noreferrer"},j=s("code",null,"Number()",-1),q=s("code",null,"ToNumber(value)",-1),O=p(`<p>而 <code>ToNumber</code> 的转换规则见下表：</p><table><thead><tr><th>参数类型</th><th>结果</th></tr></thead><tbody><tr><td>Undefined</td><td>NaN</td></tr><tr><td>Null</td><td>+0</td></tr><tr><td>Boolean</td><td>如果参数是 true，那么结果为 1。<br>如果参数是 false，那么结果为 +0。</td></tr><tr><td>Number</td><td>结果等于输入的参数（不转换）。</td></tr><tr><td>String</td><td>这个比较复杂，见下面例子。</td></tr><tr><td>Object</td><td>分两步走：<br> 1、primValue = ToPrimitive(input, Number)。<br>2、返回ToNumber(primValue)。</td></tr></tbody></table><p>传入 <code>String</code> 类型时，输出结果：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// +0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// +0</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;100&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 100</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;-100&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// -100</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;0100&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 100</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;-0100&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// -100</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;bar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;100a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// NaN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分析：如果 <code>Number</code> 函数传入一个字符串，它会优先转换为数值类型，而且忽略前导零，如果字符串出现一个非数字字符，那么结果返回 NaN。</p><h2 id="toprimitive" tabindex="-1"><a class="header-anchor" href="#toprimitive" aria-hidden="true">#</a> ToPrimitive</h2>`,6),w={href:"https://262.ecma-international.org/5.1/#sec-9.1",target:"_blank",rel:"noopener noreferrer"},J={href:"https://262.ecma-international.org/5.1/#sec-8.12.8",target:"_blank",rel:"noopener noreferrer"},x=s("code",null,"valueOf()",-1),T=s("code",null,"toString()",-1),B=p(`<p>如果 <code>valueOf()</code> 和 <code>toString()</code> 均不返回基本类型值，会产生 TypeError 错误。</p><p>其中 <code>toString</code> 方法是除了 null 和 undefined 之外，所有对象都具有的。它是返回该对象的字符串 <code>&quot;[object type]&quot;</code>，type 表示对象的类型。</p><p>举个例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [object Object]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>不过有些对象定义了不同版本的 <code>toString</code> 方法，具体见下面例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> o1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> o2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">var</span> <span class="token function-variable function">o3</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> v <span class="token operator">=</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> o4 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
<span class="token keyword">var</span> o5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [object Object]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1,2,3</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o3<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// function (){var v = 1;}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o4<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// /\\d+/g</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o5<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Mon Jun 07 2021 00:00:00 GMT+0800 (中国标准时间)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另一个 <code>valueOf</code> 方法是返回指定对象的原始值。默认返回该对象本身，数组、函数、正则简单继承了这个方法。<code>Math</code> 和 <code>Error</code> 对象没有 <code>valueOf</code> 方法。<code>Date</code> 对象的 <code>valueOf</code> 方法返回它的一个内容表示: 1970 年 1 月 1 日以来的毫秒数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1622995200000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们回到前面提到的对象（<code>obj</code>）转字符串（<code>String</code>）和数字（<code>Number</code>）的处理步骤。</p><p>对象转字符串处理步骤如下：</p><ol><li>调用 <code>toString</code> 方法，如果返回一个原始值，则 JavaScript 将其返回，否则走下一步。</li><li>调用 <code>valueOf</code> 方法，如果返回一个原始值，则 JavaScript 将其返回，否则走下一步。</li><li>JavaScript 抛出异常。</li></ol><p>对象转数字处理步骤如下：</p><ol><li>调用 <code>valueOf</code> 方法，如果返回一个原始值，则 JavaScript 将其返回，否则走下一步。</li><li>调用 <code>toString</code> 方法，如果返回一个原始值，则 JavaScript 将其返回，否则走下一步。</li><li>JavaScript 抛出异常。</li></ol><h2 id="toboolean" tabindex="-1"><a class="header-anchor" href="#toboolean" aria-hidden="true">#</a> ToBoolean</h2><p>我们直接来看它的转换规则表：</p><table><thead><tr><th>参数类型</th><th>结果</th></tr></thead><tbody><tr><td>Undefined</td><td>false</td></tr><tr><td>Null</td><td>false</td></tr><tr><td>Boolean</td><td>结果等于输入的参数（不转换）。</td></tr><tr><td>Number</td><td>如果参数是 +0, -0, 或 NaN，结果为 false ；否则结果为 true。</td></tr><tr><td>String</td><td>如果参数是空字符串（其长度为零），结果为 false，否则结果为 true。</td></tr><tr><td>Object</td><td>true</td></tr></tbody></table><p>注意一个比较特别的例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="结语" tabindex="-1"><a class="header-anchor" href="#结语" aria-hidden="true">#</a> 结语</h2><p>JavaScript 的类型转换规则比较难记忆，希望这篇文章可以帮助你加深印象，也方便日后忘记了可以回来查阅。</p><p>本文参考《你不知道的JavaScript中卷》</p>`,21);function I(V,E){const a=e("ExternalLinkIcon");return c(),l("div",null,[u,r,k,d,s("p",null,[n("今天，我们一起来学习字符串、数字和布尔值之间类型转换的基本规则。ES5 规范第 9 节中定义了一些“抽象操作”（即“仅供内部使用的操作”）和转换规则，这里主要介绍 ToString("),s("a",v,[n("英文"),t(a)]),n("/"),s("a",m,[n("中文"),t(a)]),n(")、ToNumber("),s("a",b,[n("英文"),t(a)]),n("/"),s("a",g,[n("中文"),t(a)]),n(") 和 ToBoolean("),s("a",f,[n("英文"),t(a)]),n("/"),s("a",h,[n("中文"),t(a)]),n(")，附带介绍一下 ToPrimitive("),s("a",y,[n("英文"),t(a)]),n("/"),s("a",S,[n("中文"),t(a)]),n(")。")]),N,s("p",null,[n("根据规范 "),s("a",_,[n("15.7.1.1"),t(a)]),n(" 中的定义，如果给 "),j,n(" 方法提供参数，那么返回值将由 "),q,n(" 计算的 Number 值，否则返回 +0。")]),O,s("p",null,[n("为了将对象转换为相应的基本类型值，抽象操作 ToPrimitive （参考规范 "),s("a",w,[n("9.1"),t(a)]),n("）会首先 （通过内部操作 DefaultValue，参考规范 "),s("a",J,[n("8.12.8"),t(a)]),n("）检查该值是否有 "),x,n(" 方法，如果有并且返回基本类型值，就使用该值进行强制类型转换。如果没有就使用 "),T,n(" 方法的返回值来进行强制类型转换。根据规则，调用顺序与转换字符串或数字有关。")]),B])}const D=o(i,[["render",I],["__file","类型转换.html.vue"]]);export{D as default};
