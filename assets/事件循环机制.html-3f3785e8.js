import{_ as e,r as o,o as c,c as l,a as n,b as s,e as t,d as p}from"./app-665c4bcb.js";const i="/images/js_subject/event_loop1.jpg",u="/images/js_subject/event_loop2.jpg",r={},k=p('<h1 id="事件循环机制" tabindex="-1"><a class="header-anchor" href="#事件循环机制" aria-hidden="true">#</a> 事件循环机制</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>因为 JavaScript 的事件循环是这门语言中非常重要且基础的概念，所以今天我们一起来学习下浏览器的事件循环机制。</p><p>JavaScript 是一门单线程且永不阻塞的脚本语言。</p><h3 id="为什么是单线程" tabindex="-1"><a class="header-anchor" href="#为什么是单线程" aria-hidden="true">#</a> 为什么是单线程？</h3><p>因为它是作用于浏览器交互。假设现在有两个同时的线程，一个线程在某个 DOM 节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？</p><p>所以，为了避免复杂性，从一诞生，JavaScript 就是单线程，这已经成了这门语言的核心特征，将来也不会改变。</p><h3 id="为什么是永不阻塞" tabindex="-1"><a class="header-anchor" href="#为什么是永不阻塞" aria-hidden="true">#</a> 为什么是永不阻塞？</h3><p>I/O 事件：等待一定时间才能返回结果的任务，也可称为异步任务。</p><p>永不阻塞指的是 JavaScript 执行异步任务时，主线程会挂起这个任务，等待异步任务返回结果后，再根据规则去执行相应的事件。</p><h3 id="web-worker" tabindex="-1"><a class="header-anchor" href="#web-worker" aria-hidden="true">#</a> Web Worker</h3><p>HTML5 提出 Web Worker 标准，允许 JavaScript 脚本创建多个线程，但是子线程完全受主线程限制，例如：不得操作 DOM，没有执行 I/O 操作的权限，只能为主线程分担一些基本的计算等任务。所以，这个新标准并没有改变 JavaScript 单线程的本质。</p><h2 id="事件循环初探" tabindex="-1"><a class="header-anchor" href="#事件循环初探" aria-hidden="true">#</a> 事件循环初探</h2><p>所有任务可以分成两种，分别是同步任务和异步任务。同步任务指的是在主线程执行的任务，异步任务指的是不进入主线程，而是进入「任务队列」的任务，只有「任务队列」通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。</p><p>「任务队列」是一个先进先出的数据结构，排在前面的事件，优先被主线程读取。主线程的读取过程基本上是自动的，只要执行栈一清空，「任务队列」上第一位的事件就自动进入主线程。</p><p>它的具体运行机制如下：</p><ol><li>同步任务都在主线程上执行，形成执行栈。</li><li>主线程遇到异步任务就将它挂起，等待它执行完后（此时并未阻塞主线程），然后就在「任务队列」中放置一个事件。</li><li>一旦「执行栈」的所有同步任务执行完后（此时 JS 引擎处于空闲状态），就会去读取「任务队列」里的事件，将它添加到主线程执行。</li><li>主线程重复执行第三步。</li></ol><p>这是用来说明上面步骤的流程图：</p><p><img src="'+i+'" alt="图片1"></p><h2 id="宏任务和微任务" tabindex="-1"><a class="header-anchor" href="#宏任务和微任务" aria-hidden="true">#</a> 宏任务和微任务</h2><p>进一步探索事件循环，我还发现了两个关键要素，分别是宏任务和微任务。</p><h3 id="什么是宏任务" tabindex="-1"><a class="header-anchor" href="#什么是宏任务" aria-hidden="true">#</a> 什么是宏任务</h3><p>宏任务（MacroTask），也称为任务队列，是宿主环境自身发起的。宿主环境指的是 Node 或者浏览器。</p><h3 id="常见宏任务" tabindex="-1"><a class="header-anchor" href="#常见宏任务" aria-hidden="true">#</a> 常见宏任务</h3><ul><li><code>&lt;script&gt; 整体代码</code></li><li>setTimeout</li><li>setInterval</li><li>setImmediate</li><li>requestAnimationFrame</li><li>I/O</li><li>UI 渲染</li><li>WebApi</li></ul>',25),d=n("code",null,"<script> 整体代码",-1),v={href:"https://html.spec.whatwg.org/multipage/webappapis.html#task-queue",target:"_blank",rel:"noopener noreferrer"},m=p(`<p>下面引用规范说明：</p><blockquote><p>Parsing: The HTML parser tokenizing one or more bytes, and then processing any resulting tokens, is typically a task.</p></blockquote><p>或者可以这么理解，看下面这个不怎么恰当的例子，仅供参考：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>event loop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;开始&#39;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;结束&#39;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 运行结果 --&gt;</span>
<span class="token comment">&lt;!-- 开始 --&gt;</span>
<span class="token comment">&lt;!-- 结束 --&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>event loop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;开始&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;结束&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 运行结果 --&gt;</span>
<span class="token comment">&lt;!-- 开始 --&gt;</span>
<span class="token comment">&lt;!-- 结束 --&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上面两段代码可以看出，它们的运行结果是一样的，我们可以说明 <code>script 整体代码</code> 和 <code>setTimeout</code> 一样属于宏任务。</p><h3 id="什么是微任务" tabindex="-1"><a class="header-anchor" href="#什么是微任务" aria-hidden="true">#</a> 什么是微任务</h3><p>微任务（MircoTask），是由 JavaScript 自身发起的，且它不是任务队列。</p><h3 id="常见微任务" tabindex="-1"><a class="header-anchor" href="#常见微任务" aria-hidden="true">#</a> 常见微任务</h3><ul><li>由 Promise 创建，对 <code>.then/catch/finally</code> 处理程序的执行会成为微任务</li><li>process.nextTick</li><li>queueMicrotask</li><li>MutationObserver</li></ul><p>那么宏任务和微任务在事件循环里是以怎样的顺序执行呢？我们来看下面的例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;定时器&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Promise&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 运行结果</span>
<span class="token comment">// =&gt; Promise</span>
<span class="token comment">// =&gt; 定时器</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一眼会以为微任务先于宏任务，但是别忘记了整体的 <code>script</code>，所以正确的顺序是：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>宏任务 =&gt; 微任务 =&gt; 宏任务 =&gt; 微任务 =&gt; ...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>注意：微任务会在执行任何其他事件处理，或渲染，或执行任何其他宏任务之前完成。所以上面的流程可以优化为：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>宏任务 =&gt; 微任务 =&gt; 渲染 =&gt; 宏任务 =&gt; 微任务 =&gt; ...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="完整的事件循环" tabindex="-1"><a class="header-anchor" href="#完整的事件循环" aria-hidden="true">#</a> 完整的事件循环</h2><p>思考下面这段代码的输出：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;开始&#39;</span><span class="token punctuation">)</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;定时器1&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Promise1&#39;</span><span class="token punctuation">)</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;定时器2&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Promise2&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;结束&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出的结果：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// =&gt; 开始</span>
<span class="token comment">// =&gt; 结束</span>
<span class="token comment">// =&gt; Promise1</span>
<span class="token comment">// =&gt; Promise2</span>
<span class="token comment">// =&gt; 定时器1</span>
<span class="token comment">// =&gt; 定时器2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>script 整体代码</code>作为宏任务第一个执行，将它代码分为同步任务和异步任务，同步任务直接进入主线程执行，而异步任务再细分为宏任务和微任务。</li><li>宏任务被主线程挂起，当它的回调函数注册完成后，再将它添加进任务队列。</li><li>微任务被主线程挂起，当它的回调函数注册完成后，再将它添加进微任务队列。</li><li>主线程内的事件都执行完后，即主线程为空时，先去检查微任务队列是否为空，如果不为空，那么就全部执行，如果没有就执行下一个宏任务。</li></ul><p>主线程从「任务队列」中读取事件，这个过程是循环不断的，所以整个的这种运行机制又称为事件循环（Event Loop）。</p><p>根据上面的理解绘制的流程图如下：</p><p><img src="`+u+'" alt="图片2"></p><h2 id="结语" tabindex="-1"><a class="header-anchor" href="#结语" aria-hidden="true">#</a> 结语</h2><p>本文到这里就结束了。学习事件循环机制，可以让我们认识异步任务执行顺序的特点，从而减少代码运行的不确定性。适当的使用异步任务还可以提升用户体验和网站性能。</p><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献" aria-hidden="true">#</a> 参考文献</h2>',28),g={href:"https://www.ruanyifeng.com/blog/2014/10/event-loop.html",target:"_blank",rel:"noopener noreferrer"},h={href:"https://zhuanlan.zhihu.com/p/33058983",target:"_blank",rel:"noopener noreferrer"},b={href:"https://html.spec.whatwg.org/multipage/webappapis.html#task-queue",target:"_blank",rel:"noopener noreferrer"},f={href:"https://stackoverflow.com/questions/25915634/difference-between-microtask-and-macrotask-within-an-event-loop-context/30910084#30910084",target:"_blank",rel:"noopener noreferrer"},_={href:"https://juejin.cn/post/6844904050543034376#heading-26",target:"_blank",rel:"noopener noreferrer"};function q(x,w){const a=o("ExternalLinkIcon");return c(),l("div",null,[k,n("p",null,[s("当我学到这时，对执行 "),d,s(" 是宏任务产生疑问。于是，我去网上找了相关资料进行阅读，详情"),n("a",v,[s("戳这里"),t(a)]),s("，这是 HTML Event Loop 的规范。")]),m,n("ul",null,[n("li",null,[n("a",g,[s("JavaScript 运行机制详解：再谈Event Loop"),t(a)])]),n("li",null,[n("a",h,[s("详解JavaScript中的Event Loop（事件循环）机制"),t(a)])]),n("li",null,[n("a",b,[s("Event Loop 规范"),t(a)])]),n("li",null,[n("a",f,[s("Stack Overflow"),t(a)])]),n("li",null,[n("a",_,[s("「硬核JS」一次搞懂JS运行机制"),t(a)])])])])}const j=e(r,[["render",q],["__file","事件循环机制.html.vue"]]);export{j as default};
