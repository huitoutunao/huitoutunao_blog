import{_ as a,r,o as t,c as h,a as l,b as i,e as d,d as o}from"./app-1a9b85d0.js";const n={},T=o('<h1 id="http-基本认识" tabindex="-1"><a class="header-anchor" href="#http-基本认识" aria-hidden="true">#</a> HTTP 基本认识</h1><h2 id="http-是什么" tabindex="-1"><a class="header-anchor" href="#http-是什么" aria-hidden="true">#</a> HTTP 是什么</h2><p>超文本传输协议，即 HTTP 是一个在计算机世界里专门在两点之间传输文字、图片、音频、视频等超文本数据的约定和规范。</p><h2 id="http-演变" tabindex="-1"><a class="header-anchor" href="#http-演变" aria-hidden="true">#</a> HTTP 演变</h2><p>20 世纪 90 年代初期，HTTP/0.9 版本诞生了，主要用于学术交流，需求很简单——用来在网络之间传递 HTML 超文本的内容，所以只允许用“GET”请求从服务器上获取 HTML 文档，并且在响应请求之后立即关闭连接，功能非常有限。</p><p>1996 年正式发布 HTTP/1.0 版本，更新内容如下：</p><ol><li>增加了 HEAD、POST 等新方法。</li><li>增加了响应状态码，标记可能的错误原因。</li><li>引入了协议版本号概念。</li><li>引入了 HTTP Header（头部）的概念，让 HTTP 处理请求和响应更加灵活。</li><li>传输的数据不再仅限于文本。</li></ol><p>1999 年更新了 HTTP/1.1 版本，更新内容如下：</p><ol><li>增加了 PUT、DELETE 等新的方法。</li><li>增加了缓存管理和控制。</li><li>明确了连接管理，允许持久连接。</li><li>允许响应数据分块（chunked），利于传输大文件。</li><li>强制要求 Host 头，让互联网主机托管成为可能。</li></ol><p>2015 年发布了 HTTP/2 版本，更新内容主要如下：</p><ol><li>二进制协议，不再是纯文本。</li><li>可发起多个请求，废弃了 1.1 里的管道。</li><li>使用专用算法压缩头部，减少数据传输量。</li><li>允许服务器主动向客户端推送数据。</li><li>增强了安全性，“事实上”要求加密通信。</li></ol><h2 id="http-报文结构" tabindex="-1"><a class="header-anchor" href="#http-报文结构" aria-hidden="true">#</a> HTTP 报文结构</h2><p>它由三部分组成：</p><ol><li>起始行：描述请求或相应的基本信息。</li><li>头部字段集合：使用 <code>key-value</code> 的形式更详细地说明报文。</li><li>消息正文：实际传输的数据，它不一定是纯文本，可以是图片、视频等二进制数据。</li></ol><p>其中 1 和 2 通常合称为请求头或响应头（header），3 称为实体（body），完整的 HTTP 报文就像下面这样：</p><ol><li>起始行。</li><li>头部。</li><li>空行。</li><li>实体。</li></ol><h3 id="起始行" tabindex="-1"><a class="header-anchor" href="#起始行" aria-hidden="true">#</a> 起始行</h3><p>请求报文的起始行称为请求行，它由三部分构成：</p><ul><li>请求方法：如 <code>GET/POST</code> 等表示对资源的操作。</li><li>请求目标：通常是一个 URI，标记了要操作的资源。</li><li>版本号：HTTP 协议版本。</li></ul><p>响应报文的起始行称为状态行，它由三部分构成：</p><ul><li>版本号：HTTP 协议版本。</li><li>状态码：一个三位数，使用代码的形式表示处理结果。</li><li>原因：详细的解释说明。</li></ul><h3 id="常用的头字段" tabindex="-1"><a class="header-anchor" href="#常用的头字段" aria-hidden="true">#</a> 常用的头字段</h3><ul><li>Host 字段，它属于请求字段，只能出现在请求头里，它同时也是唯一一个 <code>HTTP/1.1</code> 规范里要求必须出现的字段，也就是说，如果请求头里没有 Host，那这就是一个错误的报文。</li><li><code>User-Agent</code> 是请求字段，只出现在请求头里。它使用一个字符串来描述发起 HTTP 请求的客户端，服务器可以依据它来返回最合适此浏览器显示的页面。</li><li>Date 字段是一个通用字段，但通常出现在响应头里，表示 HTTP 报文创建的时间，客户端可以使用这个时间再搭配其他字段决定缓存策略。</li><li>Server 字段是响应字段，只能出现在响应头里。它告诉客户端当前正在提供 Web 服务的软件名称和版本号。</li><li><code>Content-Length</code>，它表示报文里 body 的长度，也就是请求头或响应头空行后面数据的长度。</li></ul><h3 id="请求方法" tabindex="-1"><a class="header-anchor" href="#请求方法" aria-hidden="true">#</a> 请求方法</h3><ol><li>GET：获取资源，可以理解为读取或者下载数据。</li><li>HEAD：获取资源的元信息。</li><li>POST：向资源提交数据（“新建”），相当于写入或上传数据。</li><li>PUT：类似 POST，“更新/修改”。</li><li>DELETE：删除资源。</li><li>CONNECT：建立特殊的连接隧道。</li><li>OPTIONS：列出可对资源实行的方法。</li><li>TRACE：追踪请求 - 响应的传输路径。</li></ol><h3 id="响应状态码" tabindex="-1"><a class="header-anchor" href="#响应状态码" aria-hidden="true">#</a> 响应状态码</h3><ul><li>1××：提示信息，表示目前是协议处理的中间状态，还需要后续的操作。</li><li>2××：成功，报文已经收到并被正确处理。</li><li>3××：重定向，资源位置发生变动，需要客户端重新发送请求。</li><li>4××：客户端错误，请求报文有误，服务器无法处理。</li><li>5××：服务器错误，服务器在处理请求时内部发生了错误。</li></ul><p>301：永久重定向，意思是此次请求的资源已经不存在了，需要改用新的 URI 再次访问。</p><p>302：临时重定向，意思是请求的资源还在，但需要暂时用另一个 URI 来访问。</p><h2 id="结语" tabindex="-1"><a class="header-anchor" href="#结语" aria-hidden="true">#</a> 结语</h2>',30),c={href:"https://time.geekbang.org/column/intro/100029001?tab=catalog",target:"_blank",rel:"noopener noreferrer"};function s(p,H){const e=r("ExternalLinkIcon");return t(),h("div",null,[T,l("p",null,[i("本文到这里就结束了。这是学习"),l("a",c,[i("《透视HTTP协议》"),d(e)]),i("罗剑锋老师课程的笔记。希望可以帮到你。")])])}const u=a(n,[["render",s],["__file","HTTP基本认识.html.vue"]]);export{u as default};
