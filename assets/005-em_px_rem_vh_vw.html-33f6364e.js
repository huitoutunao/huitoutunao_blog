import{_ as e,o as d,c,d as o}from"./app-665c4bcb.js";const a={},n=o(`<h1 id="_005-em-px-rem-vh-vw-区别" tabindex="-1"><a class="header-anchor" href="#_005-em-px-rem-vh-vw-区别" aria-hidden="true">#</a> 005-em/px/rem/vh/vw 区别?</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p><code>px</code>、<code>em</code>、<code>%</code> 这几个单位比较常用，因为它们兼容性较好，适用于大部分开发场景。</p><p>从 CSS3 开始，新增了 <code>rem</code>、<code>vw</code>、<code>vh</code>、<code>vm</code> 等计量单位，使得前端能够更好的开发出响应式页面，以及适应不同分辨率屏幕的设备。</p><h2 id="单位" tabindex="-1"><a class="header-anchor" href="#单位" aria-hidden="true">#</a> 单位</h2><p>绝对长度单位：<code>cm</code>、<code>mm</code>、<code>Q</code>、<code>in</code>、<code>pc</code>、<code>pt</code>、<code>px</code>。</p><p>相对长度单位：<code>em</code>、<code>ex</code>、<code>ch</code>、<code>rem</code>、<code>lh</code>、<code>vw</code>、<code>vh</code>、<code>vmin</code>、<code>vmax</code>。</p><p>这里我们主要讲述 <code>px</code>、<code>em</code>、<code>rem</code>、<code>vh</code>、<code>vw</code>。</p><h3 id="px" tabindex="-1"><a class="header-anchor" href="#px" aria-hidden="true">#</a> px</h3><p>所谓像素就是呈现在我们显示器上的一个个小点，每个像素点都是大小等同的，所以像素为计量单位被分在了绝对长度单位中。</p><h3 id="em" tabindex="-1"><a class="header-anchor" href="#em" aria-hidden="true">#</a> em</h3><p>相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸（<code>1em = 16px</code>）。</p><p>为了简化 <code>font-size</code> 的换算，我们需要在 <code>css</code> 中的 <code>body</code> 选择器中声明 <code>font-size = 62.5%</code>，这就使 <code>em</code> 值变为 <code>16px*62.5% = 10px</code>。因此现在只要把我们的像素值除以 10 就得出对应的 <code>em</code> 单位值。例如：<code>10px = 1em</code>、<code>18px = 1.8em</code>。</p><p>特点：</p><ul><li><code>em</code> 值并非固定。</li><li><code>em</code> 会继承父级元素的字体大小。</li><li>相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸。</li><li>任意浏览器的默认字体高都是 <code>16px</code>。</li></ul><h3 id="rem" tabindex="-1"><a class="header-anchor" href="#rem" aria-hidden="true">#</a> rem</h3><p>相对的只是 HTML 根元素 <code>font-size</code> 的值。我们为了简化转换，可以设置根元素的字体大小为 62.5%。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">html</span> <span class="token punctuation">{</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> 62.5%<span class="token punctuation">;</span> <span class="token comment">/* 公式 16px * 62.5% = 10px */</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
* 1rem = 10px
* 1.2rem = 12px
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>特点：</p><ul><li><code>rem</code> 单位可谓集相对大小和绝对大小的优点于一身。</li><li>和 <code>em</code> 不同的是 <code>rem</code> 总是相对于根元素，而不像 <code>em</code> 一样使用级联的方式来计算尺寸。</li></ul><h3 id="vw-和-vh" tabindex="-1"><a class="header-anchor" href="#vw-和-vh" aria-hidden="true">#</a> vw 和 vh</h3><p><code>vw</code>，就是根据窗口的宽度，分成 100 等份，<code>100vw</code> 就表示满宽，<code>50vw</code> 就表示一半宽。（<code>vw</code> 始终是针对窗口的宽），同理，<code>vh</code> 则为窗口的高度。</p><p>窗口指的是：浏览器的可视区域、移动端的布局视口。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li><code>px</code>：绝对单位，页面按精确像素展示；</li><li><code>em</code>：相对单位，基准点为父节点字体的大小，如果自身定义了 <code>font-size</code> 按自身来计算，整个页面内 <code>1em</code> 不是一个固定的值；</li><li><code>rem</code>：相对单位，相对根节点html的字体大小来计算；</li><li><code>vh、vw</code>：主要用于页面视口大小布局，在页面布局上更加方便简单；</li></ul><p><em>部分答案整理自网络资源</em></p>`,26),i=[n];function s(r,p){return d(),c("div",null,i)}const h=e(a,[["render",s],["__file","005-em_px_rem_vh_vw.html.vue"]]);export{h as default};
