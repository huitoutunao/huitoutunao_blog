import{_ as n,o as s,c as a,d as e}from"./app-665c4bcb.js";const t="/images/qs_js/js_1.png",o={},c=e(`<h1 id="_008-如何判断一个元素是否在可视区域中" tabindex="-1"><a class="header-anchor" href="#_008-如何判断一个元素是否在可视区域中" aria-hidden="true">#</a> 008-如何判断一个元素是否在可视区域中</h1><h2 id="实现方式" tabindex="-1"><a class="header-anchor" href="#实现方式" aria-hidden="true">#</a> 实现方式</h2><p>判断一个元素是否在可视区域内，我们一般使用以下几种方法：</p><ul><li>offsetTop、scrollTop</li><li>getBoundingClientRect</li><li>Intersection Observer</li></ul><h3 id="offsettop、scrolltop" tabindex="-1"><a class="header-anchor" href="#offsettop、scrolltop" aria-hidden="true">#</a> offsetTop、scrollTop</h3><ul><li><code>offsetTop</code>：返回当前元素的外边框至父元素的上内边框的像素距离</li><li><code>scrollTop</code>：一个元素的 <code>scrollTop</code> 值是这个元素的内容顶部（卷起来的）到它的视口可见内容（的顶部）的距离的度量。当一个元素的内容没有产生垂直方向的滚动条，那么它的 <code>scrollTop</code> 值为 <code>0</code></li></ul><p>再了解下以下几个方法：</p><ul><li><code>clientWidth</code>：元素内容区宽度加左右内边距宽度，即 <code>content + padding</code></li><li><code>clientHeight</code>：元素内容区高度加上下内边距宽度，即 <code>content + padding</code></li><li><code>scrollWidth</code>：是一个元素内容宽度的度量，包括由于 <code>overflow</code> 溢出而在屏幕上不可见的内容</li><li><code>scrollHeight</code>：是一个元素内容高度的度量，包括由于溢出导致的视图中不可见内容</li></ul><p>计算公式如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 满足下面判断就在可视区域内</span>
el<span class="token punctuation">.</span>offsetTop <span class="token operator">-</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop <span class="token operator">&lt;=</span> viewHeight

<span class="token keyword">function</span> <span class="token function">viewHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 兼容性写法</span>
    <span class="token keyword">return</span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="getboundingclientrect" tabindex="-1"><a class="header-anchor" href="#getboundingclientrect" aria-hidden="true">#</a> getBoundingClientRect</h3><p><code>getBoundingClientRect()</code> 方法返回一个 <code>DOMRect</code> 对象，其提供了元素的大小及其相对于视口的位置。</p><p>返回值是一个 <code>DOMRect</code> 对象，是包含整个元素的最小矩形（包括 <code>padding</code> 和 <code>border-width</code>）。该对象使用 <code>left</code>、<code>top</code>、<code>right</code>、<code>bottom</code>、<code>x</code>、<code>y</code>、<code>width</code> 和 <code>height</code> 这几个以像素为单位的只读属性描述整个矩形的位置和大小。除了 <code>width</code> 和 <code>height</code> 以外的属性是相对于视图窗口的左上角来计算的。</p><p>如下图说明：</p><p><img src="`+t+`" alt="图片1"></p><p>因此判断一个元素是否在可视区域内，需要满足以下条件：</p><ul><li><code>top &gt;= 0</code></li><li><code>left &gt;= 0</code></li><li><code>bottom &lt;= viewHeight</code></li><li><code>right &lt;= viewWidth</code></li></ul><p>实现代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isInViewPort</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> target <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> viewWidth <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth <span class="token operator">||</span>
        document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth <span class="token operator">||</span>
        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth
    <span class="token keyword">const</span> viewHeight <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">||</span>
        document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight <span class="token operator">||</span>
        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight
    <span class="token keyword">const</span> <span class="token punctuation">{</span>
        top<span class="token punctuation">,</span>
        right<span class="token punctuation">,</span>
        bottom<span class="token punctuation">,</span>
        left<span class="token punctuation">,</span>
    <span class="token punctuation">}</span> <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    top <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>
    left <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>
    right <span class="token operator">&lt;=</span> viewWidth <span class="token operator">&amp;&amp;</span>
    bottom <span class="token operator">&lt;=</span> viewHeight
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="intersectionobserver" tabindex="-1"><a class="header-anchor" href="#intersectionobserver" aria-hidden="true">#</a> IntersectionObserver</h3><p><code>IntersectionObserver()</code> 构造器创建并返回一个 <code>IntersectionObserver</code> 对象。 如果指定 <code>rootMargin</code> 则会检查其是否符合语法规定，检查阈值以确保全部在 <code>0.0</code> 到 <code>1.0</code> 之间，并且阈值列表会按升序排列。如果阈值列表为空，则默认为一个 <code>[0.0]</code> 的数组。</p><p>语法如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span>callback<span class="token punctuation">[</span><span class="token punctuation">,</span> options<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">var</span> <span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">entries<span class="token punctuation">,</span> observer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">var</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">root</span><span class="token operator">:</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">rootMargin</span><span class="token operator">:</span> <span class="token string">&#39;0px 0px 0px 0px&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">threshold</span><span class="token operator">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 <code>new IntersectionObserver</code> 创建了观察者 <code>observer</code>，传入的参数 <code>callback</code> 在重叠比例超过 <code>threshold</code> 时会被执行。</p><p>举个例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> target <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.target&#39;</span><span class="token punctuation">)</span>
observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景" aria-hidden="true">#</a> 应用场景</h2><ul><li>列表无限滚动</li><li>图片懒加载</li><li>可点击链接的预加载</li><li>计算广告元素的曝光情况</li></ul><p><em>部分答案整理自网络资源</em></p>`,29),p=[c];function i(l,d){return s(),a("div",null,p)}const u=n(o,[["render",i],["__file","008-如何判断一个元素是否在可视区域中.html.vue"]]);export{u as default};
