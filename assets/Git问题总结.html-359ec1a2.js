import{_ as t,r as o,o as r,c as l,a as e,b as n,e as s,d as i}from"./app-58148c69.js";const c={},d=e("h1",{id:"git-问题总结",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#git-问题总结","aria-hidden":"true"},"#"),n(" Git 问题总结")],-1),p=e("blockquote",null,[e("p",null,"前言：这篇主要写自己在使用 git 过程中遇到的问题总结")],-1),u=e("h2",{id:"git-多个账号切换",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#git-多个账号切换","aria-hidden":"true"},"#"),n(" git 多个账号切换")],-1),h={href:"https://www.jianshu.com/p/301afa16f471",target:"_blank",rel:"noopener noreferrer"},g=i(`<p>最后，git 仓库关联</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> remote <span class="token function">add</span> origin git@lhcxy:~/Test.git

$ <span class="token function">git</span> remote <span class="token function">add</span> origin git@huitoutunao:~/Test.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="git-拉取远程某分支" tabindex="-1"><a class="header-anchor" href="#git-拉取远程某分支" aria-hidden="true">#</a> git 拉取远程某分支</h2><p>假设你要拉取远程的 dev 分支到本地</p><p>步骤如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> fetch origin dev

$ <span class="token function">git</span> checkout <span class="token parameter variable">-b</span> dev origin/dev

$ <span class="token function">git</span> pull origin dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="git-分支添加注释说明" tabindex="-1"><a class="header-anchor" href="#git-分支添加注释说明" aria-hidden="true">#</a> git 分支添加注释说明</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 添加</span>
$ <span class="token function">git</span> config branch.<span class="token punctuation">{</span>branch-name<span class="token punctuation">}</span>.description 说明

<span class="token comment"># 查看</span>
$ <span class="token function">git</span> config branch.<span class="token punctuation">{</span>branch-name<span class="token punctuation">}</span>.description
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果嫌麻烦，可以全局安装这个依赖 <code>npm i -g git-br</code>，使用命令 <code>git br</code> 查看所有分支注释。</p><h2 id="git-push-每次都要输入账户密码解决方案" tabindex="-1"><a class="header-anchor" href="#git-push-每次都要输入账户密码解决方案" aria-hidden="true">#</a> git push 每次都要输入账户密码解决方案</h2>`,10),v={href:"https://git-scm.com/docs/gitcredentials",target:"_blank",rel:"noopener noreferrer"},b=i(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> config credential.helper store
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>由于 <code>2021-08-13</code> 之后不再支持密码输入，因此需要换成 token，这个 token 在 github 主页设置 <code>Developer settings</code>，我这里是生成一个永久期限的。</p><p>然后在当前项目目录运行如下命令设置远程仓库地址：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> remote set-url origin https://<span class="token operator">&lt;</span>token<span class="token operator">&gt;</span>@github.com/<span class="token operator">&lt;</span>username<span class="token operator">&gt;</span>/<span class="token operator">&lt;</span>repo<span class="token operator">&gt;</span>.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,4),m={href:"https://blog.csdn.net/weixin_48505549/article/details/123173915",target:"_blank",rel:"noopener noreferrer"},f=i(`<h2 id="git-设置默认分支" tabindex="-1"><a class="header-anchor" href="#git-设置默认分支" aria-hidden="true">#</a> git 设置默认分支</h2><p>例如：<code>main</code> 是你想要的默认分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> branch --set-upstream-to<span class="token operator">=</span>origin/main main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面设置完后，第一次提交需要执行下面语句：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> push origin main:main // <span class="token function">git</span> push <span class="token operator">&lt;</span>远程主机名<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>本地分支名<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>远程分支名<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="git-提交代码解决-lf-和-crlf-冲突" tabindex="-1"><a class="header-anchor" href="#git-提交代码解决-lf-和-crlf-冲突" aria-hidden="true">#</a> git 提交代码解决 lf 和 crlf 冲突</h2><p>推荐全局设置</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 提交时转换为 lf，检出时不转换</span>
$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> core.autocrlf input

<span class="token comment"># 拒绝提交包含混合换行符的文件</span>
$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> core.safecrlf <span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="git-提交代码超时" tabindex="-1"><a class="header-anchor" href="#git-提交代码超时" aria-hidden="true">#</a> git 提交代码超时</h2>`,9),k={href:"https://blog.csdn.net/qq_41166135/article/details/81282572",target:"_blank",rel:"noopener noreferrer"},_={href:"https://segmentfault.com/a/1190000037797501",target:"_blank",rel:"noopener noreferrer"},x=i(`<p>下面内容复制到 <code>git安装目录\\etc\\ssh\\ssh_config</code> 文件的末尾处：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Host github.com
User xxx // 自己的登录名或者邮箱
Hostname ssh.github.com
PreferredAuthentications publickey
IdentityFile ~/.ssh/id_rsa
Port 443
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),$={start:"2"},I={href:"https://blog.csdn.net/weixin_45685193/article/details/120606369",target:"_blank",rel:"noopener noreferrer"},y=i(`<p>如果使用了科学上网，那么运行下面指令设置全局或局部代理，代理的 <code>ip</code> 和端口号以你的 <code>IE</code> 代理为准：</p><p>查看 IE 代理如下操作：<code>IE 浏览器 =&gt; 设置 =&gt; Internet 选项 =&gt; 连接 =&gt; 局域网设置</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># IE 代理 127.0.0.1:1080，下面二选一即可，我这里选择第一个</span>
$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> http.proxy http://127.0.0.1:1080
$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> https.proxy https://127.0.0.1:1080
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>取消代理运行如下指令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> http.proxy
$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> https.proxy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function E(w,N){const a=o("ExternalLinkIcon");return r(),l("div",null,[d,p,u,e("p",null,[n("这里我省略了如何配置多个账户的介绍，不过这个可以网上搜索到答案，这里贴一下我的"),e("a",h,[n("参考链接"),s(a)]),n("。")]),g,e("p",null,[n("通过 https url，而非 ssh url 关联的远程仓库时，git push 会每次都要输入密码。在项目目录运行下面语句可以解决，"),e("a",v,[n("参考链接"),s(a)]),n("。")]),b,e("p",null,[e("a",m,[n("参考地址"),s(a)])]),f,e("ol",null,[e("li",null,[n("ssh: connect to host github.com port 22: Connection timed out. 解决方式："),e("a",k,[n("参考链接1"),s(a)]),n("、"),e("a",_,[n("参考链接2"),s(a)])])]),x,e("ol",$,[e("li",null,[n("Failed to connect to github.com port 443: Timed out. 解决方式："),e("a",I,[n("参考链接"),s(a)])])]),y])}const V=t(c,[["render",E],["__file","Git问题总结.html.vue"]]);export{V as default};
