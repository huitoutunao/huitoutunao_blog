import{_ as n,o as s,c as a,d as t}from"./app-8d691574.js";const p={},e=t(`<h1 id="_012-ajax" tabindex="-1"><a class="header-anchor" href="#_012-ajax" aria-hidden="true">#</a> 012-AJAX</h1><h2 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h2><p>AJAX 全称是 Asynchronous JavaScript and XML，中文意思是用 JavaScript 执行异步网络请求。在不重载当前网页的情况下，与服务器交换数据，并且更新部分数据。</p><h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h2><p>AJAX 的原理简单来说通过 <code>XmlHttpRequest</code> 对象来向服务器发异步请求，从服务器获得数据，然后用 JavaScript 来操作 DOM 而更新页面。</p><h3 id="xmlhttprequest-属性" tabindex="-1"><a class="header-anchor" href="#xmlhttprequest-属性" aria-hidden="true">#</a> XmlHttpRequest 属性</h3><ul><li><code>XMLHttpRequest.onreadystatechange</code>：它会在 <code>XMLHttpRequest.readyState</code> 的状态改变时触发。</li><li><code>XMLHttpRequest.readyState</code>：返回一个 <code>XMLHttpRequest</code> 代理当前所处的状态。 <ul><li>值：0；状态：<code>UNSENT</code>；描述：代理被创建，但尚未调用 <code>open()</code> 方法。</li><li>值：1；状态：<code>OPENED</code>；描述：<code>open()</code> 方法已经被调用。</li><li>值：2；状态：<code>HEADERS_RECEIVED</code>；描述：<code>send()</code> 方法已经被调用，并且头部和状态已经可获得。</li><li>值：3；状态：<code>LOADING</code>；描述：下载中，<code>responseText</code> 属性已经包含部分数据。</li><li>值：4；状态：<code>DONE</code>；描述：下载操作已完成。</li></ul></li><li><code>XMLHttpRequest.responseText</code>：在一个请求被发送后，从服务器端返回文本。</li></ul><h3 id="xmlhttprequest-方法" tabindex="-1"><a class="header-anchor" href="#xmlhttprequest-方法" aria-hidden="true">#</a> XmlHttpRequest 方法</h3><ul><li><code>XMLHttpRequest.open()</code>：初始化一个请求。 <ul><li><code>method</code>：使用的 <code>HTTP</code> 方法，比如 <code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code> 等。</li><li><code>url</code>：要向其发送请求的 <code>URL</code>。</li><li><code>async</code>：表示是否异步执行操作，默认为 <code>true</code>。</li><li><code>user</code>：可选的用户名用于认证用途，默认 <code>null</code>。</li><li><code>password</code>：可选的密码用于认证用途，默认 <code>null</code>。</li></ul></li><li><code>XMLHttpRequest.send()</code>：发送 <code>HTTP</code> 请求。 <ul><li><code>body</code>：在 <code>XHR</code> 请求中要发送的数据体，如果不传递数据则为 <code>null</code>。</li></ul></li></ul><p>如果使用 <code>GET</code> 请求发送数据的时候，需要注意如下：</p><ul><li>将请求数据添加到 <code>open()</code> 方法中的 <code>url</code> 地址中。</li><li>发送请求数据中的 <code>send()</code> 方法中参数设置为 <code>null</code>。</li></ul><h2 id="封装" tabindex="-1"><a class="header-anchor" href="#封装" aria-hidden="true">#</a> 封装</h2><p>在现代浏览器上写 AJAX 主要依靠 <code>XMLHttpRequest</code> 对象，下面简单封装：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">ajax</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> option <span class="token operator">=</span> options <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">const</span> params <span class="token operator">=</span> option<span class="token punctuation">.</span>data

  option<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token punctuation">(</span>option<span class="token punctuation">.</span>type <span class="token operator">||</span> <span class="token string">&#39;GET&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  option<span class="token punctuation">.</span>dataType <span class="token operator">=</span> option<span class="token punctuation">.</span>dataType <span class="token operator">||</span> <span class="token string">&#39;json&#39;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>option<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;GET&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>option<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>params<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>option<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span> option<span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> status <span class="token punctuation">}</span> <span class="token operator">=</span> xhr
      <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        option<span class="token operator">?.</span><span class="token function">success</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">,</span> xhr<span class="token punctuation">.</span>responseXML<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        option<span class="token operator">?.</span><span class="token function">fail</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">dataType</span><span class="token operator">:</span> <span class="token string">&#39;json&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;https://www.example.com&#39;</span><span class="token punctuation">,</span>
  <span class="token function">success</span><span class="token punctuation">(</span><span class="token parameter">text<span class="token punctuation">,</span> xml</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> xml<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">fail</span><span class="token punctuation">(</span><span class="token parameter">status</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),o=[e];function c(l,i){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","012-AJAX.html.vue"]]);export{d as default};
