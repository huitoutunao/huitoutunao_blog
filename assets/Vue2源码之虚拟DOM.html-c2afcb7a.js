import{_ as a,r as s,o as d,c as o,a as n,b as i,e as t,d as c}from"./app-7afcd560.js";const l="/images/vue_js/vnode_1.png",p="/images/vue_js/vnode_2.png",r="/images/vue_js/vnode_3.png",u={},v=c(`<h1 id="vue2-源码之虚拟-dom" tabindex="-1"><a class="header-anchor" href="#vue2-源码之虚拟-dom" aria-hidden="true">#</a> Vue2 源码之虚拟 DOM</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>这是 <code>Vue.js</code> 的源码分析，记录自己在学习源码时的心得和收获。</p><p><code>Vue.js</code> 的源码目录结构如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>src
├── compiler        # 编译相关
├── core            # 核心代码
├── platforms       # 不同平台的支持
├── server          # 服务端渲染
├── sfc             # .vue 文件解析
├── shared          # 共享代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重点关注 <code>core</code> 文件夹下面的代码文件，因为这是 <code>Vue.js</code> 的核心代码。</p><h2 id="vnode" tabindex="-1"><a class="header-anchor" href="#vnode" aria-hidden="true">#</a> VNode</h2><h3 id="vnode-是什么" tabindex="-1"><a class="header-anchor" href="#vnode-是什么" aria-hidden="true">#</a> VNode 是什么</h3><p>VNode 可以理解成节点描述对象，它描述了应该怎样去创建真实的 DOM，即 JavaScript 对象版本的 DOM 元素。</p><p>VNode 创建 DOM 并插入视图。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>vnode (创建) =&gt; DOM (渲染) =&gt; 视图
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="vnode-的作用" tabindex="-1"><a class="header-anchor" href="#vnode-的作用" aria-hidden="true">#</a> VNode 的作用</h3><p>最重要的的一个作用是 VNode 更新前后的对比，这样只更新差异的节点，减少性能浪费。</p><h3 id="vnode-的类型" tabindex="-1"><a class="header-anchor" href="#vnode-的类型" aria-hidden="true">#</a> VNode 的类型</h3><ul><li>注释节点</li><li>文本节点</li><li>元素节点</li><li>组件节点</li><li>函数式节点</li><li>克隆节点</li></ul><h2 id="patch" tabindex="-1"><a class="header-anchor" href="#patch" aria-hidden="true">#</a> patch</h2><h3 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h3><p>patch 是在现有 DOM 上进行修改来达到渲染视图的目的。对现有 DOM 进行修改需要做三件事：</p><ul><li>创建新增的节点</li><li>删除已经废弃的节点</li><li>修改需要更新的节点</li></ul><h3 id="新增节点" tabindex="-1"><a class="header-anchor" href="#新增节点" aria-hidden="true">#</a> 新增节点</h3><p>以下这几种情况需要新增节点</p><ul><li>首次渲染页面，oldVNode 不存在，所以需要使用 vnode 来渲染 DOM</li><li>vnode 和 oldVNode 不是同一个节点，即vnode 是新节点而 oldVNode 是废弃节点</li></ul><p>元素节点、注释节点和文本节点。整个流程如下：</p><p><img src="`+l+`" alt="vnode1"></p><h3 id="删除节点" tabindex="-1"><a class="header-anchor" href="#删除节点" aria-hidden="true">#</a> 删除节点</h3><p>以 vnode 为标准，vnode 没有的节点都属于废弃的节点，应该在 DOM 中删除。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 删除一组节点</span>
<span class="token keyword">function</span> <span class="token function">removeVnodes</span><span class="token punctuation">(</span><span class="token parameter">vnodes<span class="token punctuation">,</span> startIdx<span class="token punctuation">,</span> endIdx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> startIdx <span class="token operator">&lt;=</span> endIdx<span class="token punctuation">;</span> <span class="token operator">++</span>startIdx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> ch <span class="token operator">=</span> vnodes<span class="token punctuation">[</span>startIdx<span class="token punctuation">]</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ifDef</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">removeNode</span><span class="token punctuation">(</span>ch<span class="token punctuation">.</span>elm<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 删除单个节点</span>
<span class="token keyword">const</span> nodeOps <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">removeChild</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> child</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        node<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">removeNode</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> parent <span class="token operator">=</span> nodeOps<span class="token punctuation">.</span><span class="token function">parentNode</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        nodeOps<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> el<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="更新节点" tabindex="-1"><a class="header-anchor" href="#更新节点" aria-hidden="true">#</a> 更新节点</h3><p>vnode 和 oldVNode 是相同节点，对它们进行更细致的比对，替换差异化的值。</p><p>所以整个 patch 运行流程是这样的，首先检测 oldVNode 是否存在，如果不存在，就使用 vnode 创建节点并插入视图。否则进入下一步判断，oldVNode 和 vnode 是否是同一个节点，如果是，就使用 patchVnode 进行更详细的比对与更新操作。否则使用 vnode 创建真实节点并插入到视图中旧节点的旁边，最后将视图中的旧节点删除。</p><p>更新节点的逻辑流程如下：</p><p><img src="`+p+'" alt="vnode2"></p><p>更新节点的具体实现过程如下：</p><p><img src="'+r+`" alt="vnode3"></p><h3 id="更新子节点" tabindex="-1"><a class="header-anchor" href="#更新子节点" aria-hidden="true">#</a> 更新子节点</h3><h4 id="更新策略" tabindex="-1"><a class="header-anchor" href="#更新策略" aria-hidden="true">#</a> 更新策略</h4><ol><li>创建子节点</li></ol><p>新创建的虚拟节点和旧的虚拟节点通过循环比对，将新增的子节点插入到视图 DOM 中未处理节点前面。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>A：已处理
B：未处理
C：新节点
index：数组下标

视图 DOM: [A, A, B, B]
新创建的虚拟节点：[A, A, C]
旧的虚拟节点：[A, A, B, B]

按照逻辑，新创建的虚拟节点 C，应该在视图 DOM 的数组下标 index = 2 前面插入。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>更新子节点</li></ol><p>新虚拟节点和旧虚拟节点两个节点是同一个节点且位置相同，只需要更新节点的操作即可。</p><ol start="3"><li>移动子节点</li></ol><p>移动节点通常发生在新虚拟节点中的某个节点和旧虚拟节点中的某个节点是同一个节点，但是位置不同，所以在真实的 DOM 中需要将这个节点的位置以新虚拟节点的位置为基准进行移动。</p><ol start="4"><li>删除子节点</li></ol><p>当新虚拟节点中的所有节点都被循环了一遍后，也就是循环结束后，如果旧虚拟节点中还有剩余的没有被处理的节点，那么这些节点就该废弃，需要删除的节点。</p><h3 id="优化策略" tabindex="-1"><a class="header-anchor" href="#优化策略" aria-hidden="true">#</a> 优化策略</h3><p>新前：<code>newChildren</code> 中所有未处理的第一个节点；</p><p>新后：<code>newChildren</code> 中所有未处理的最后一个节点；</p><p>旧前：<code>oldChildren</code> 中所有未处理的第一个节点；</p><p>旧后：<code>oldChildren</code> 中所有未处理的最后一个节点；</p><p>快捷查找节点的方式如下：</p><ol><li>新前与旧前</li></ol><p>对比新前和旧前节点是否同一个节点，如果是就直接更新节点，不做移动节点操作。</p><ol start="2"><li>新后与旧后</li></ol><p>对比新后和旧后节点是否同一个节点，如果是就直接更新节点，不做移动节点操作。</p><ol start="3"><li>新后与旧前</li></ol><p>对比新后和旧后节点是否同一个节点，如果是就更新节点，还需要执行移动节点的操作。移动位置是 <code>oldChildren</code> 所有未处理节点最后面。因为更新节点是以新虚拟节点为基准。</p><ol start="4"><li>新前与旧后</li></ol><p>对比新后和旧后节点是否同一个节点，如果是就更新节点，还需要执行移动节点的操作。移动位置是 <code>oldChildren</code> 所有未处理节点最前面。因为更新节点是以新虚拟节点为基准。</p><p>如果以上四种方式没有找到相同的节点，这时再通过循环的方式去 <code>oldChildren</code> 中详细找一遍，看看能否找到。</p><p><strong>如何判断未处理过的节点？</strong></p><p>假设旧虚拟节点为 <code>oldChildren</code> 数组列表，新虚拟节点为 <code>newChildren</code> 数组列表；它们开始位置分别为 <code>oldStartIdx</code> 和 <code>newStartIdx</code>。它们的结束位置分别为 <code>oldEndIdx</code> 和 <code>newEndIdx</code>。</p><ol><li>两边向中间循环。</li><li>判断结束条件是 <code>oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx</code>。</li><li>如果 <code>newChildren</code> 数组先遍历完成，那么 <code>oldChildren</code> 数组剩余的元素是废弃的节点，且下标在 <code>oldStartIdx</code> 和 <code>oldEndIdx</code> 之间。</li><li>如果 <code>oldChildren</code> 数组先遍历完成，那么 <code>newChildren</code> 数组剩余的元素是新增的节点，且下标在 <code>newStartIdx</code> 和 <code>newEndIdx</code> 之间。</li></ol><h2 id="结语" tabindex="-1"><a class="header-anchor" href="#结语" aria-hidden="true">#</a> 结语</h2><p>在 <code>Vue.js</code> 的模板中，渲染列表时可以为节点设置一个属性 <code>key</code>，这个属性可以标示一个节点的唯一 id。这是官方比较推荐的做法，因为在更新子节点时，需要在 <code>oldChildren</code> 中循环去找一个节点。但是如果我们在模板中渲染列表时，为子节点设置 <code>key</code> 属性，那么建立了一个 <code>key</code> 对应一个节点下标对象。也就是说，如果在节点上设置了属性 <code>key</code>，那么在 <code>oldChildren</code> 中找相同节点时，可以直接通过 <code>key</code> 拿到下标，从而获取节点。这样，我们根本不需要通过循环来查找。</p><p>通过 <code>patch</code> 可以对比新旧两个虚拟 <code>DOM</code>，从而只针对发生了变化的节点进行更新视图的操作。讨论了什么情况下新增节点，将新节点插入到什么位置。还讨论了在什么情况下删除节点，删除哪个节点，以及在什么情况下修改节点，修改哪个节点等问题。</p><p>除此之外，讨论了更新子节点的过程，其中包括创建新增的子节点、删除废弃的子节点、更新发生变化的子节点以及移动位置发生了变化的子节点等。</p><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献" aria-hidden="true">#</a> 参考文献</h2>`,68),h=n("li",null,"《深入浅出 Vue.js》刘博文·著",-1),k={href:"https://github.com/answershuto/learnVue",target:"_blank",rel:"noopener noreferrer"};function m(b,x){const e=s("ExternalLinkIcon");return d(),o("div",null,[v,n("ul",null,[h,n("li",null,[n("a",k,[i("learnVue"),t(e)])])])])}const _=a(u,[["render",m],["__file","Vue2源码之虚拟DOM.html.vue"]]);export{_ as default};
