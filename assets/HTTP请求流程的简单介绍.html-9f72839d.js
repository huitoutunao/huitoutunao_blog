import{_ as h,r as i,o as d,c as t,a as e,b as a,e as n,d as s}from"./app-1a9b85d0.js";const c="/images/browser/browser_1.png",l="/images/browser/browser_2.png",o="/images/browser/browser_3.png",p={},T=s('<h1 id="http-请求流程的简单介绍" tabindex="-1"><a class="header-anchor" href="#http-请求流程的简单介绍" aria-hidden="true">#</a> HTTP 请求流程的简单介绍</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>前端工程师几乎每天都要和浏览器打交道，所以，了解浏览器是如何工作的，能够使我们快速定位问题和提升用户体验。</p><h2 id="http-定义" tabindex="-1"><a class="header-anchor" href="#http-定义" aria-hidden="true">#</a> HTTP 定义</h2><p>HTTP 是一种允许浏览器向服务器获取资源的协议，是 Web 的基础，通常由浏览器发起请求，用来获取不同类型的文件，例如 HTML 文件、CSS 文件、JavaScript 文件、图片、视频等。</p><h2 id="浏览器发起-http-请求" tabindex="-1"><a class="header-anchor" href="#浏览器发起-http-请求" aria-hidden="true">#</a> 浏览器发起 HTTP 请求</h2><h3 id="构建请求" tabindex="-1"><a class="header-anchor" href="#构建请求" aria-hidden="true">#</a> 构建请求</h3><h3 id="查找缓存" tabindex="-1"><a class="header-anchor" href="#查找缓存" aria-hidden="true">#</a> 查找缓存</h3><p>如果浏览器缓存中有该资源文件，就直接使用了。</p><p>优点如下：</p><ul><li>缓解服务器端压力，提升性能。</li><li>对于网站来说，缓存是实现快速资源加载的重要组成部分。</li></ul><h3 id="准备-ip-地址和端口" tabindex="-1"><a class="header-anchor" href="#准备-ip-地址和端口" aria-hidden="true">#</a> 准备 IP 地址和端口</h3><h4 id="原因" tabindex="-1"><a class="header-anchor" href="#原因" aria-hidden="true">#</a> 原因</h4><p>HTTP 协议是建立在 TCP 连接基础之上，所以在 HTTP 工作开始之前，浏览器需要通过 TCP 与服务器建立连接。也就是说 HTTP 的内容是通过 TCP 的传输数据阶段来实现的。</p><h4 id="获取-ip" tabindex="-1"><a class="header-anchor" href="#获取-ip" aria-hidden="true">#</a> 获取 IP</h4><p>浏览器会请求 DNS 返回域名对应的 IP，当然浏览器还提供了 DNS 数据缓存服务，如果某个域名已经解析过了，那么浏览器会缓存解析的结果。</p><h4 id="获取端口" tabindex="-1"><a class="header-anchor" href="#获取端口" aria-hidden="true">#</a> 获取端口</h4><p>如果 URL 没有指定端口号，那么默认是 80。</p><h3 id="等待-tcp-队列" tabindex="-1"><a class="header-anchor" href="#等待-tcp-队列" aria-hidden="true">#</a> 等待 TCP 队列</h3><p>Chrome 有个机制，同一个域名同时最多只能建立 6 个 TCP 连接（包含但不限于请求图片、视频，样式，脚本等），如果在同一个域名下同时有 10 个请求发生，那么其中 4 个请求会进入排队等待状态，直至进行中的请求完成。</p><h3 id="建立-tcp-连接" tabindex="-1"><a class="header-anchor" href="#建立-tcp-连接" aria-hidden="true">#</a> 建立 TCP 连接</h3><p>三次握手。</p><h3 id="发送-http-请求" tabindex="-1"><a class="header-anchor" href="#发送-http-请求" aria-hidden="true">#</a> 发送 HTTP 请求</h3><p>请求数据格式包含如下：</p><ul><li>请求行：请求方法、请求 URI、HTTP 版本协议。</li><li>请求头：比如包含了浏览器所使用的操作系统、浏览器内核等信息，以及当前请求的域名信息、浏览器端的 Cookie 信息，等等。</li><li>请求体：例如：POST 请求，发送给后端的数据。</li></ul><h2 id="服务端处理-http-请求" tabindex="-1"><a class="header-anchor" href="#服务端处理-http-请求" aria-hidden="true">#</a> 服务端处理 HTTP 请求</h2><h3 id="返回请求" tabindex="-1"><a class="header-anchor" href="#返回请求" aria-hidden="true">#</a> 返回请求</h3><p>数据格式如下：</p><ul><li>响应行：协议版本和状态码。</li><li>响应头：比如服务器生成返回数据的时间、返回的数据类型（JSON、HTML、流媒体等类型），以及服务器要在客户端保存的 Cookie 等信息。</li><li>响应体：通常响应体就包含了 HTML 的实际内容。</li></ul><p>状态码如下：</p><ul><li>信息响应 100-199</li><li>成功响应 200-299</li><li>重定向 300-399</li><li>客户端错误 400-499</li><li>服务器错误 500-599</li></ul><h3 id="断开连接" tabindex="-1"><a class="header-anchor" href="#断开连接" aria-hidden="true">#</a> 断开连接</h3><p>浏览器或服务器其头信息加入 Connection:Keep-Alive，那么 TCP 连接在发送后将仍然保持打开状态。这样做有什么好处呢？保持 TCP 连接可以省去下次请求时需要建立连接的时间，提升资源加载速度。</p><h3 id="重定向" tabindex="-1"><a class="header-anchor" href="#重定向" aria-hidden="true">#</a> 重定向</h3><h2 id="为什么很多站点第二次打开速度会很快" tabindex="-1"><a class="header-anchor" href="#为什么很多站点第二次打开速度会很快" aria-hidden="true">#</a> 为什么很多站点第二次打开速度会很快？</h2><p><img src="'+c+'" alt="图片1"></p><h2 id="登录状态是如何保持的" tabindex="-1"><a class="header-anchor" href="#登录状态是如何保持的" aria-hidden="true">#</a> 登录状态是如何保持的？</h2><p><img src="'+l+'" alt="图片2"></p><h2 id="结语" tabindex="-1"><a class="header-anchor" href="#结语" aria-hidden="true">#</a> 结语</h2><p><img src="'+o+'" alt="图片3"></p>',40),_={href:"https://time.geekbang.org/column/intro/216",target:"_blank",rel:"noopener noreferrer"};function u(b,f){const r=i("ExternalLinkIcon");return d(),t("div",null,[T,e("p",null,[a("这是学习"),e("a",_,[a("《浏览器工作原理与实践》"),n(r)]),a("李兵老师课程的笔记。")])])}const P=h(p,[["render",u],["__file","HTTP请求流程的简单介绍.html.vue"]]);export{P as default};
