import{_ as n,o as s,c as a,d as e}from"./app-8d691574.js";const o="/images/js_advanced/prototype_2.png",t="/images/js_advanced/prototype_1.png",p={},c=e(`<h1 id="原型和原型链" tabindex="-1"><a class="header-anchor" href="#原型和原型链" aria-hidden="true">#</a> 原型和原型链</h1><h2 id="构造函数创建对象" tabindex="-1"><a class="header-anchor" href="#构造函数创建对象" aria-hidden="true">#</a> 构造函数创建对象</h2><blockquote><p>所有函数默认都会有一个名为 prototype 的公有且不可枚举的属性，它会指向另一个对象，这个对象通常称为某函数原型，因为我们通过该函数属性 prototype 引用来访问。</p></blockquote><p>举个例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Foo</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
<span class="token punctuation">}</span>

<span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype <span class="token comment">// { } 对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过调用 <code>new Foo()</code> 创建的每个对象将最终被 <code>[[Prototype]]</code> 链接到 <code>Foo.prototype</code> 原型对象上：（见下面 <a href="#prototype">[[Prototype]]</a> 内容介绍）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Foo</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
<span class="token punctuation">}</span>

<span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token string">&#39;Jack&#39;</span><span class="token punctuation">)</span>

Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="prototype" tabindex="-1"><a class="header-anchor" href="#prototype" aria-hidden="true">#</a> [[Prototype]]</h2><p>JavaScript 中每个对象都有个 <code>[[Prototype]]</code> 内置属性，这个属性会指向该对象的原型，且它也是关联其他对象的引用。如果对象本身没有找到需要的属性，那么就会继续访问对象的 <code>[[Prototype]]</code> 链。</p><p>JavaScript 的非标准但许多浏览器实现的属性 <code>__proto__</code> 来表示 <code>[[Prototype]]</code>。</p><p>关于 <code>__proto__</code> 的简单例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token comment">// 打印结果见下图</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Chrome(v89) 浏览器打印结果图如下：</p><p><img src="`+o+`" alt="JS原型"></p><p>分析：从图中可以看到 <code>__proto__</code> 这个属性指向了该对象的原型 <code>Object.prototype</code>。因为原型对象上的 <code>constructor</code> 属性指向关联的函数 <code>Object()</code>。（见下面 <a href="#constructor">constructor</a> 内容介绍）</p><p>关于原型链的简单例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">v</span><span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> bar <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token comment">// 创建 bar 和 foo 关联</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span>v<span class="token punctuation">)</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分析：因为 bar 对象的 <code>[[Prototype]]</code> 关联到了 foo，所以 bar 对象本身没有 v 这个属性，也可以通过 <code>[[Prototype]]</code> 链查找到。但是，如果 foo 对象上也找不到 v 属性，那么会沿着 <code>[[Prototype]]</code> 链继续查找匹配的属性，直到查找完整条原型链。</p><h2 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor" aria-hidden="true">#</a> constructor</h2><p>每个原型默认有一个公有且不可枚举的 <code>constructor</code> 属性，这个属性引用的是对象关联的函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Foo</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
<span class="token punctuation">}</span>

<span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Foo <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">注意</p><p>如果你创建了一个新对象并替换了函数默认的 prototype 对象引用，那么新对象并不会自动获得 constructor 属性。</p></div><p>举个例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Foo</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
<span class="token punctuation">}</span>

<span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

bar<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Foo <span class="token comment">// false</span>
bar<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Object <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分析：对象 bar 本身并没有 <code>constructor</code> 属性，所以它会委托 <code>[[prototype]]</code> 链上的 <code>Foo.prototype</code> 对象，但是这个对象由于被改写了，导致没有默认的 constructor 属性，最后会委托给原型链顶端的 <code>Object.prototype</code>。这个对象有 <code>constructor</code> 属性，指向内置的 <code>Object()</code> 函数。</p><p>因此它们的关系图如下：</p><p><img src="`+t+'" alt="JS原型"></p><p><strong>其中 <code>[[prototype]]</code> 关联的对象就是原型链。</strong></p><h2 id="结语" tabindex="-1"><a class="header-anchor" href="#结语" aria-hidden="true">#</a> 结语</h2><p>以上内容是参考《你不知道的JavaScript》中，关于原型解析所整理出来的总结。</p>',30),i=[c];function r(l,d){return s(),a("div",null,i)}const v=n(p,[["render",r],["__file","原型和原型链.html.vue"]]);export{v as default};
