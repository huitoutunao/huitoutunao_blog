import{_ as c,r as p,o as u,c as i,a as n,b as s,e as a,w as l,d as e}from"./app-091fe1e3.js";const r={},k=n("h1",{id:"函数柯里化",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#函数柯里化","aria-hidden":"true"},"#"),s(" 函数柯里化")],-1),d=n("h2",{id:"柯里化是什么",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#柯里化是什么","aria-hidden":"true"},"#"),s(" 柯里化是什么")],-1),v=n("blockquote",null,[n("p",null,"在计算机科学中，柯里化（Currying），又译为卡瑞化或加里化，是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。")],-1),m=n("p",null,"柯里化不会调用函数，它只是对函数进行转换。",-1),b=n("code",null,"bind",-1),f=n("code",null,"context",-1),g=n("code",null,"fn(a, b, c)",-1),h=n("code",null,"fn(a)(b)(c)",-1),y=e(`<h2 id="柯里化的实现" tabindex="-1"><a class="header-anchor" href="#柯里化的实现" aria-hidden="true">#</a> 柯里化的实现</h2><p>首先看个简单的例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">curry</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">sum</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">}</span>

<span class="token keyword">var</span> sumCurry <span class="token operator">=</span> <span class="token function">curry</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sumCurry</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分析：<code>curry(sum)</code> 执行结果是 <code>function (a)</code>，当它被 <code>sumCurry(2)</code> 这样调用时，它的参数会被保存在词法作用域中（<a href="/guide/js_advanced/%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E9%97%AD%E5%8C%85">闭包</a>），然后返回一个 <code>function (b)</code>，接着这个函数被 <code>sumCurry(3)</code> 调用，并且，它将该调用传递给原始的 <code>sum</code> 函数。</p><p>其实上面的 <code>curry()</code> 可以优化成如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">curry</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> newArgs <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> newArgs<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果 <code>sum(a, b, c)</code> 携带 3 个参数呢？<code>curry()</code> 函数还要再返回 <code>function (c)</code>。如果 <code>sum</code> 携带 4、5 个参数呢？显然上面那种写法会严重影响阅读体验。为了解决这个问题，请看下面代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// help_curry() 是上面 curry() 优化后作为协助的函数</span>
<span class="token keyword">function</span> <span class="token function">help_curry</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token comment">// debugger;</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> newArgs <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment">// debugger;</span>
        <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> newArgs<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">curry</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> len</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    len <span class="token operator">=</span> len <span class="token operator">||</span> fn<span class="token punctuation">.</span>length
    <span class="token comment">// debugger;</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> unite <span class="token operator">=</span> <span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token comment">// debugger;</span>
            <span class="token keyword">return</span> <span class="token function">curry</span><span class="token punctuation">(</span><span class="token function">help_curry</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> unite<span class="token punctuation">)</span><span class="token punctuation">,</span> len <span class="token operator">-</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// debugger;</span>
            <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token function">curry</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了更好的理解上面逻辑，建议把我注释的 <code>debugger</code> 放开，在浏览器的调试面板查看。文中涉及到的 <code>call</code> 和 <code>apply</code> 方法，如果不了解的，可以<a href="/guide/js_subject/%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0call%E3%80%81apply%E5%92%8Cbind">戳这里学习</a>。</p>`,9),_={class:"custom-container warning"},w=n("p",{class:"custom-container-title"},"注意",-1),E=n("code",null,"fn.length",-1),j={href:"https://es6.ruanyifeng.com/#docs/function#%E5%87%BD%E6%95%B0%E7%9A%84-length-%E5%B1%9E%E6%80%A7",target:"_blank",rel:"noopener noreferrer"},x=e(`<h2 id="柯里化的应用" tabindex="-1"><a class="header-anchor" href="#柯里化的应用" aria-hidden="true">#</a> 柯里化的应用</h2><p>现在我们已经了解了柯里化的定义以及如何实现，那它到底有什么用呢？</p><p>例如，我们有一个用于格式化和输出信息的日志（log）函数 <code>log(date, importance, message)</code>，见下面示意代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">log</span> <span class="token punctuation">(</span><span class="token parameter">date<span class="token punctuation">,</span> importance<span class="token punctuation">,</span> message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>date<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>date<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">] [</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>importance<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">] </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> log <span class="token operator">=</span> <span class="token function">curry</span><span class="token punctuation">(</span>log<span class="token punctuation">)</span> <span class="token comment">// 柯里化</span>
<span class="token keyword">var</span> logNow <span class="token operator">=</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token function">logNow</span><span class="token punctuation">(</span><span class="token string">&quot;WARN&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;this is warn&quot;</span><span class="token punctuation">)</span> <span class="token comment">// HH:mm WARN this is warn</span>

<span class="token keyword">var</span> debugNow <span class="token operator">=</span> <span class="token function">logNow</span><span class="token punctuation">(</span><span class="token string">&quot;DEBUG&quot;</span><span class="token punctuation">)</span>
<span class="token function">debugNow</span><span class="token punctuation">(</span><span class="token string">&quot;this is debug&quot;</span><span class="token punctuation">)</span> <span class="token comment">// HH:mm DEBUG this is debug</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>柯里化的这种用途理解为参数复用。</p><h2 id="结语" tabindex="-1"><a class="header-anchor" href="#结语" aria-hidden="true">#</a> 结语</h2><p>这篇文章主要是认识函数柯里化的基本概念，代码实现和它的基础用途。这里虽然实现了 <code>curry()</code> 函数，但更像柯里化和偏函数的综合应用。（具体什么是偏函数，下一篇文章介绍）</p><p>柯里化是生于函数式编程，也服务于函数式编程，而 JavaScript 并非真正的函数式编程语言，相比 Haskell 等函数式编程语言，JavaScript 使用柯里化等函数式特性有额外的性能开销，也缺乏类型推导。</p><p>因此限制了柯里化在 JavaScript 实际项目中的普遍使用。</p><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献" aria-hidden="true">#</a> 参考文献</h2>`,10),q={href:"https://github.com/mqyqingfeng/Blog/issues/42",target:"_blank",rel:"noopener noreferrer"},A=n("li",null,"《JavaScript高级程序设计——函数柯里化》",-1),B={href:"https://zh.javascript.info/currying-partials",target:"_blank",rel:"noopener noreferrer"},C={href:"https://juejin.cn/post/6844903603266650125",target:"_blank",rel:"noopener noreferrer"};function N(S,J){const o=p("RouterLink"),t=p("ExternalLinkIcon");return u(),i("div",null,[k,d,v,m,n("p",null,[s("函数柯里化的基本方法和函数绑定 "),a(o,{to:"/guide/js_subject/%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0call%E3%80%81apply%E5%92%8Cbind.html#bind"},{default:l(()=>[s("bind()")]),_:1}),s(" 一样（唯一不同是 "),b,s(" 强制绑定了 "),f,s("）：使用一个闭包返回一个函数。两者的区别在于，当函数被调用时，返回的函数还需要设置一些传入的参数。例如：一个函数从可调用的 "),g,s(" 转换成可调用的 "),h,s("。")]),y,n("div",_,[w,n("p",null,[s("由于文中须要使用到函数的长度 "),E,s("，不建议使用 ES6 给参数定义默认值，因为会导致调用函数错误。"),n("a",j,[s("详见"),a(t)])])]),x,n("ul",null,[n("li",null,[n("a",q,[s("JavaScript专题之函数柯里化"),a(t)])]),A,n("li",null,[n("a",B,[s("柯里化——现代JavaScript教程"),a(t)])]),n("li",null,[n("a",C,[s("大佬，JavaScript 柯里化，了解一下？"),a(t)])])])])}const H=c(r,[["render",N],["__file","函数柯里化.html.vue"]]);export{H as default};
